---
slug: from-simple-socket-reader-to-server-inphp
title: From simple socket reader to server inÂ PHP
author: Aleksey V Zapparov AKA ixti
date: 24/10/2009
category: development/networking
tags: php, server, socket

After I have published <i>SocketServer</i> on <a href="http://www.phpclasses.org/browse/package/5758.html">PHPClasses.org</a>, I received comments about some ugly places and ideas of improvement. So now, it can be used as a skeleton for something more interesting then "Hello, World!" sample. In this post I'll guide you through modified <i>example.php</i> step by step as in <a href="/?p=107">previous one</a> but with new functions and improvement of <i>SocketServer</i> in focus. So in fact it's just an extension of <a href="/?p=107">previous post</a>.

~


Since previous version, request handler setter's name was changed from <code>setHandler()</code> to <code>setRequestHandler()</code>. Also, class has obtained three events (with corresponding handler setters):
<ol>
    <li><i>onOpen</i> -- <code>setOnOpenHandler()</code></li>
    <li><i>onCleanup</i> -- <code>setOnCleanupHandler()</code></li>
    <li><i>onClose</i> -- <code>setOnCloseHandler()</code></li>
</ol>

Now, let me introduce sample handlers for that events. First event, <i>onOpen</i> is fired upon new connection arrives. You can use it to have your registry of connections to decide which exact action should be handled according to specified (passed) request, connection id, remote address and remote port (in case of INET* sockets).
<pre lang="php">
function my_open_handler($id, $addr, $port = null)
{
    echo sprintf('New connection [%d] arrived from %s:%d', $id, $addr, $port) . "\n";
}
</pre>

Second event <i>onCleanup</i> is called with only one argument passed - connection id, upon client shutdowned connection manually but server didn't know about it.
<pre lang="php">
function my_cleanup_handler($id)
{
    echo sprintf('Connection [%d] cleaned-up', $id) . "\n";
}
</pre>

And finally, third event <i>onClose</i> is similar to <i>onClenup</i> but called upon request handler asks to close this connection.
<pre lang="php">
function my_close_handler($id)
{
    echo sprintf('Connection [%d] closed', $id) . "\n";
}
</pre>

Of course request handler now also receives connection id too. So here's new example of request handler:
<pre lang="php">
function my_handler($request, $id)
{
    if (1 === preg_match('/quit|exit/i', $request)) {
        return null;
    }

    if (1 === preg_match('/stop|halt/i', $request)) {
        return false;
    }

    echo sprintf('*** Got "%s" from %d', $request, $id) . PHP_EOL;
    return md5($request) . PHP_EOL;
}
</pre>

After all was explained (hope so, if not - feel free to comment here or send me an email), all we need is to register necessary handlers just as it was with request handler. So you can download attached package to post (below) with class itself and example file.

<b>UPD</b> <i>(26 October 2009)</i> Since today all updated versions of class and it's example will be placed on <a href="http://www.phpclasses.org/browse/package/5758.html">phpclasses.org</a>.

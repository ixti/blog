---
slug: complex-mutators-for-doctrinev1x
title: Com­plex mutat­ors for Doctrine v.1.x
author: Aleksey V Zapparov AKA ixti
date: 02/06/2010
category: doctrine-orm
tags: filter, mutator, orm, php, plug-in, zend_date

If you work with <a href="http://www.doctrine-project.org/">Doctrine ORM</a> you probably met situation when you need to mangle values on setting or getting them. Especially when you are using different types. One of such problems are dates. As I'm using <a href="http://framework.zend.com/">Zend Framework</a> I prefer to deal with <code>Zend_Date</code> as object representing dates, so I receive flexible way to represent dates in necessary format, e.g. in user's default locale format. For such purposes you need a mutator that will convert Zend_Date to DB suitable string on setting your model's property.

~


Let's say we have a very dummy model representing some abstract person:

~~~ php
class Person extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->hasColumn('birthday', 'date');
    }
}
```

So <code>Person</code> have a <code>birthday</code> property which is date of course. Now let's add mutators for this property to  retrieve birthday as <code>Zend_Date</code> object, and to be able to set it as Zend_Date object. To do so we need to add <code>setBirthday()</code> and <code>getBirthday()</code> methods for our model, so it will become:

~~~ php
class Person extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->hasColumn('birthday', 'date');
    }


    public function setBirthday($value)
    {
        if ($value instanceof Zend_Date) {
            $value = $value->toString('YYYY-MM-dd');
        } else if (null !== $value &amp;&amp; false === is_string($value)) {
            throw new App_Exception('Unsupported type or format of birthday');
        }

        $this->_set('birthday', $value);
    }


    public function getBirthday()
    {
        $value = $this->_get('birthday');
        return ($value) ? new Zend_Date($value, 'YYYY-MM-dd') : $value;
    }
}
```

Looks clean and works well. But, what if, let's say, our <code>Person</code> would like to keep date of his marriage? Of course we can add another pair of getter/setter. But this way you'll have two mostly the same pairs of methods. Of course, to keep DRY principle you can create some kind of base method and use it in concrete mutators:

~~~ php
class Person extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->hasColumn('birthday',   'date');
        $this->hasColumn('married_at', 'date');
    }


    protected function setDateField($name, $value)
    {
        if ($value instanceof Zend_Date) {
            $value = $value->toString('YYYY-MM-dd');
        } else if (null !== $value &amp;&amp; false === is_string($value)) {
            throw new App_Exception('Unsupported type or format of ' . $name);
        }

        $this->_set($name, $value);
    }


    protected function getDateField($name)
    {
        $value = $this->_get($name);
        return ($value) ? new Zend_Date($value, 'YYYY-MM-dd') : $value;
    }


    public function setBirthday($value)
    {
        return $this->setDateField('birthday', $value);
    }


    public function getBirthday()
    {
        return $this->getDateField('birthday');
    }


    public function setMarriedAt($value)
    {
        return $this->setDateField('married_at', $value);
    }


    public function getMarredAt()
    {
        return $this->getDateField('married_at');
    }
}
```

So far looks not so bad. But let's pretend that our <code>Person</code> decided to buy a <code>Car</code>. And he wants to know and update last ITV date. In this case we can of course copy paste some lines of code, but to keep it DRY, we need to move this code out from the model to some abstract place. First idea I thought was to use <code>Doctrine_Template</code> to "mix-in" <code>setDateField()</code> but it's impossible, as you can't call protected methods of <code>Doctrine_Record</code> (and we need to be able to call <code>_set()</code> and <code>_get()</code> methods) from <code>Doctrine_Template</code>. Another variant, is to extend <code>Doctrine_Record</code> class with base mutators:

~~~ php
abstract class App_Record extends Doctrine_Record
{
    protected function setDateField($name, $value)
    {
        if ($value instanceof Zend_Date) {
            $value = $value->toString('YYYY-MM-dd');
        } else if (null !== $value &amp;&amp; false === is_string($value)) {
            throw new App_Exception('Unsupported type or format of ' . $name);
        }

        $this->_set($name, $value);
    }


    protected function getDateField($name)
    {
        $value = $this->_get($name);
        return ($value) ? new Zend_Date($value, 'YYYY-MM-dd') : $value;
    }
}
```

So then you'll extend <code>App_Record</code> in your models instead of <code>Doctrine_Record</code>. But we still will need to create concrete mutators in your models. Not really DRY, isn't it. After I spent some time I found really nice solution that is called <code>Doctrine_Record_Filter</code>. Basically it was not designed for such purposes, but we can create cool hack with it. <code>Doctrine_Record_Filter</code> was designed to allow you to dynamically load some properties if they are not found in your model (see <code>Doctrine_Record_Filer_Compound</code> description). So we can use it's behavior to achieve our goals. So let's create a special behavior filter (you can also see it <a href="http://gist.github.com/422331">on gist with examples</a>):

~~~ php
class App_Record_Filter_Date extends Doctrine_Record_Filter
{
    protected $_fields = array();


    public function init()
    {
        $table = $this->getTable();
        foreach ($table->getColumns() as $name => $opts) {
            if ('date' === $opts['type']) {
                $fieldName = $table->getFieldName($name);
                $table->removeColumn($name);
                $table->setColumn($name . ' as __' . $fieldName, 'date', $opts['length'], $opts);
                $this->_fields[$fieldName] = '__' . $fieldName;
            }
        }
    }


    public function filterSet(Doctrine_Record $record, $name, $value)
    {
        if ((null !== $value) &amp;&amp; isset($this->_fields[$name])) {
            if ($value instanceof Zend_Date) {
                $value = $value->toString('YYYY-MM-dd');
            }
            if (Zend_Date::isDate($value, 'YYYY-MM-dd')) {
                $record[$this->_fields[$name]] = $value;
            }
            return $record;
        }
        throw new Doctrine_Record_UnknownPropertyException(sprintf('Unknown record property / related component "%s" on "%s"', $name, get_class($record)));
    }
    

    public function filterGet(Doctrine_Record $record, $name)
    {
        if (isset($this->_fields[$name])) {
            $value = $record[$this->_fields[$name]];
            return ($value &amp;&amp; Zend_Date::isDate($value)) ? new Zend_Date($value, 'YYYY-MM-dd') : $value;
        }
        throw new Doctrine_Record_UnknownPropertyException(sprintf('Unknown record property / related component "%s" on "%s"', $name, get_class($record)));
    }
}
```

So, now you don't have to define mutators at all. All you have to do is to attach this filter to your model:

~~~ php
class Person extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->hasColumn('birthday',   'date');
        $this->hasColumn('married_at', 'date');
    }


    public function setUp()
    {
        $this->unshiftFilter(new App_Record_Filter_Date);
    }
}
```

Now it looks really DRY. So this filter will take all job on itself. Here how it works. On the init stage it looks for date columns in your model and replaces them with different name (prefixed with double underscore). So after you'll attach this filter, accessing some property of date type will cause model to fire up filter as there will be no such property. To best understand how <code>Doctrine_Record_Filter</code> works, please refer to it's manual. 

Now let's take a close look at mutator itself. As you can see it stores values as a strings (it casts in both directions every time). So, for example, if you want to increase birthday by one month, following code will not produce expected result:

~~~ php
$person->birthday->addMonth(1);
```

Instead you'll need to do it like this:

~~~ php
$person->birthday = $person->birthday->addMonth(1);
```

Basically, it looks like a trivial problem (at least I was sure it is), but in fact it's much more interesting that you might think because of Doctrine's internals. So, to achieve this we need to store date as a <code>Zend_Date</code> object and that's not the hardest part of the task, all we need is to modify base mutators. Let's start back from our base model (without touching magic filter) and will redefine base mutator as:

~~~ php
class Person extends Doctrine_Record
{
    // ... skipped ...

    protected function setDateField($name, $value)
    {
        if (is_string($value) &amp;&amp; Zend_Date::isDate($value, 'YYYY-MM-dd')) {
            $value = new Zend_Date($value, 'YYYY-MM-dd');
        }
        return $this->_set($name, $value);
    }


    protected function getDateField($name)
    {
        $value = $this->_get($name);
        if (is_string($value) &amp;&amp; Zend_Date::isDate($value, 'YYYY-MM-dd')) {
            $value = new Zend_Date($value, 'YYYY-MM-dd');
            $this->_set($name, $value);
        } 
        return $value;
    }

    // ... skipped ...
}
```

In fact I really was sure that extending <code>Zend_Date</code> with dummy <code>App_Date</code> wrapper which will override <code>isDate()</code> and <code>__toString()</code> methods to be "hard-coded" to use <code>YYYY-MM-dd</code> format will be more than enough! But I was wrong. I won't be telling in lots of details why it's wrong way of thinking - if you want you can learn Doctrine's internals by yourself or ask me privately so I'll explain - but in few words it will fail with "wrong type" validation error. So after all, to make it work proper way you'll need to add a <code>preSave()</code> hook which will set internal data to string:

~~~ php
class Person extends Doctrine_Record
{
    // ... skipped ...

    public function preSave(Doctrine_Event $event)
    {
        foreach (array('birthday', 'married_at') as $name) {
            $value = $this->_data[$name];
            if ($value instanceof Zend_Date) {
                $this->_data[$name] = $value->toString('YYYY-MM-dd');
            }
        }
    }

    // ... skipped ...
}
```

So now, you can do something like this:

~~~ php
$person->birthday->addMonth(1);
$person->save();
```

But everything was started from trying to keep DRY. Unfortunately <code>Doctrine_Record_Filter</code> won't be able to affect internal (protected) data altering on preSave() hook. So we returned to situation when we need to extend base record class. Let's update <code>filterSet()</code> and <code>filterGet()</code> methods in our filter class to reflect "store fields as objects" idea:

~~~ php
class App_Record_Filter_Date extends Doctrine_Record_Filter
{
    protected $_fields = array();


    public function init()
    {
        $table = $this->getTable();
        foreach ($table->getColumns() as $name => $opts) {
            if ('date' === $opts['type']) {
                $fieldName = $table->getFieldName($name);
                $table->removeColumn($name);
                $table->setColumn($name . ' as __' . $fieldName, 'date', $opts['length'], $opts);
                $this->_fields[$fieldName] = '__' . $fieldName;
            }
        }
    }


    public function filterSet(Doctrine_Record $record, $name, $value)
    {
        if (isset($this->_fields[$name])) {
            if (is_string($value) &amp;&amp; Zend_Date::isDate($value, 'YYYY-MM-dd')) {
                $value = new Zend_Date($value, 'YYYY-MM-dd');
            }
            $record[$this->_fields[$name]] = $value;
            return $record;
        }
        throw new Doctrine_Record_UnknownPropertyException(sprintf('Unknown record property / related component "%s" on "%s"', $name, get_class($record)));
    }
    

    public function filterGet(Doctrine_Record $record, $name)
    {
        if (isset($this->_fields[$name])) {
            $value = $record[$this->_fields[$name]];
            if (is_string($value) &amp;&amp; Zend_Date::isDate($value, 'YYYY-MM-dd')) {
                $value = new Zend_Date($value, 'YYYY-MM-dd');
                $record[$this->_fields[$name]] = $value;
            } 
            return $value;
        }
        throw new Doctrine_Record_UnknownPropertyException(sprintf('Unknown record property / related component "%s" on "%s"', $name, get_class($record)));
    }
}
```

So now all we need is to add this filter to our model and define <code>preSave()</code> hook:

~~~ php
class Person extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->hasColumn('birthday',   'date');
        $this->hasColumn('married_at', 'date');
    }


    public function setUp()
    {
        $this->unshiftFilter(new App_Record_Filter_Date);
    }


    public function preSave(Doctrine_Event $event)
    {
        foreach (array('birthday', 'married_at') as $name) {
            $value = $this->_data[$name];
            if ($value instanceof Zend_Date) {
                $this->_data[$name] = $value->toString('YYYY-MM-dd');
            }
        }
    }
}
```

As you can see it looks terrible (hard-coded fields to be casted) not a best idea. As <code>App_Record_Filter_Date</code> knows of which fields are affected we can extend it to give us:

~~~ php
class App_Record_Filter_Date extends Doctrine_Record_Filter
{
    // ... skipped ...

    public function getAffectedFields()
    {
        return array_values($this->_fields);
    }
}
```

Now we can rewrite our <code>Person</code>'s <code>preSave()</code> hook with more robust version:

~~~ php
class Person extends Doctrine_Record
{
    // ... skipped ...
    
    public function preSave(Doctrine_Event $event)
    {
        foreach ($this->getTable()->getFilters() as $f) {
            if ($f instanceof App_Record_Filter_Date) {
                foreach ($f->getAffectedFields() as $name) {
                    $value = $this->_data[$name];
                    if ($value instanceof Zend_Date) {
                        $this->_data[$name] = $value->toString('YYYY-MM-dd');
                    }
                }
                break;
            }
        }
    }
}
```

Ok. Now things are little bit more cool :)) But you still need to repeat your <code>preSave()</code> hook from model to model. And now we are face to face with need of <code>Doctrine_Record</code> extended version, so let's move all "repeated" parts to the base model's class:

~~~ php
abstract class App_Record extends Doctrine_Record
{
    public function setUp()
    {
        $this->unshiftFilter(new App_Record_Filter_Date);
    }


    public function preSave(Doctrine_Event $event)
    {
        foreach ($this->getTable()->getFilters() as $f) {
            if ($f instanceof App_Record_Filter_Date) {
                foreach ($f->getAffectedFields() as $name) {
                    $value = $this->_data[$name];
                    if ($value instanceof Zend_Date) {
                        $this->_data[$name] = $value->toString('YYYY-MM-dd');
                    }
                }
                break;
            }
        }
    }

}
```

After all, finally our <code>Person</code> looks really clean:

~~~ php
class Person extends App_Record
{
    public function setTableDefinition()
    {
        $this->hasColumn('birthday',   'date');
        $this->hasColumn('married_at', 'date');
    }
}
```

Phew! I've did it. Scope of examples above was very narrow, but it gives an idea of bigger extensions and more complex usage of <code>Doctrine_Record_Filter</code>. Feel free to ask/comment/blame - I'll appreciate any of your thoughts!

This post was started on top of <a href="http://zend-framework-community.634137.n4.nabble.com/Odd-issue-with-retrieving-formatting-and-displaying-dates-td2236470.html">idea described by me</a> on Zend Framework mailing list. You can find "full" sources of above examples on gist:
<ul>
<li><a href="http://gist.github.com/422331">Simple version</a></li>
<li><a href="http://gist.github.com/422387">Advanced version</a></li>
</ul>

<ins datetime="2010-12-05T13:57:02+00:00">UPDATE</ins>
As it was pointed by Dave Small in the comments, <code>YYYY</code> is not good format token. So I have updated sources in order to make filter format independent. Now you can either relay on standard date format, which is <code>yyyy-MM-dd</code> now, or pass your own date format, e.g. if your models all keep dates as timestamp you might want to modify <code>App_Record</code> a little bit:

~~~ php
abstract class App_Record extends Doctrine_Record
{
    public function setUp()
    {
        $this->unshiftFilter(new App_Record_Filter_Date('U'));
    }

    // ... skipped
}
```

Or, of course, you can define specific date format on per-model basis, e.g.:

~~~ php
abstract class App_Record extends Doctrine_Record
{
    public function setUp()
    {
        $this->unshiftFilter(new App_Record_Filter_Date('U'));
    }

    // ... skipped
}

class Person extends App_Record
{
    protected $_loadDefaultFilters = false;

    public function setUp()
    {
        $this->unshiftFilter(new App_Record_Filter_Date);
    }

    // ... skipped
}
```

New (modified) version of both variants (simple and advanced) were pushed to gist (so you can see diff). Attached archives were also updated.

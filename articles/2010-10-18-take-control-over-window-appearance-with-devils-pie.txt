---
title: Take control over window appearance with Devil's Pie
author: Aleksey V Zapparov AKA ixti
date: 18/10/2010
category: howto/software
tags: devils-pie, gimp, lisp, matcher, openbox-2, window

Sometimes you want your windows to appear more predictably, more pragmatically. In this case you need so called window-matcher with ability to perform some actions on matched windows. Let's say, you want some windows to open up always on fourth workspace. Most of the window managers (for example <a href="http://openbox.org/">Openbox</a> provides very powerful window-matcher) already provide you window-matcher possibilities. But what if built-in possibilities is not enough? Or your window manager is very ascetic like <a href="http://en.wikipedia.org/wiki/Metacity">Metacity</a>, that is default WM of devil's pie author. In this cases <a href="http://www.burtonini.com/blog/computers/devilspie">devil's pie</a> is your friend...

~


<strong>What the heck is Devil's pie</strong>
Devil's pie is a window matcher utility for X. Here's description from <a href="http://www.burtonini.com/blog/computers/devilspie">official homepage</a>:
<blockquote>
A window-matching utility, inspired by Sawfish's "Matched Windows" option and the lack of the functionality in Metacity. Metacity lacking window matching is not a bad thing â€” Metacity is a lean window manager, and window matching does not have to be a window manager task.

Devil's Pie can be configured to detect windows as they are created, and match the window to a set of rules. If the window matches the rules, it can perform a series of actions on that window. For example, I can make all windows created by X-Chat appear on all workspaces, and the main Gkrellm1 window does not appear in the pager or task list.
</blockquote>

<strong>NOTE!</strong> Devil's pie perform action only when window first time appeared. It does not spies for the end of window's life. You can pass <code>-a</code> argument on start to perform action on the existing windows, but that will simply perform actions on existing windows just as these windows were opened after devil's pie was run.

<strong>Cool! I want it! Where I can find it?</strong>
If you are using Debian GNU/Linux, you can install it with apt:

```
# apt-get install devilspie
```

<strong>I have devil's pie, now what?</strong>
Now you need to configure it. Devil's pie is running as a daemon per user, so you can put it into your autostart script. When it starts it read definition files <code>*.ds</code> from global configurations and from user's home folder: <code>$HOME/.devilspie/</code>. Each definition file is a set of match/action instructions, which takes form of:

```
(if {condition} {action})
```

Let's say you want to perform some action on all windows that have <code>window_class</code> <i>"Foobar"</i>, in this case <i>{condition}</i> will be:

```
( is (window_class) "Foobar" )
```

If you want more complex matching condition, you may write something like this:

```
( and
  ( is (window_class) "Foobar" )
  ( or
    ( is (window_role) "lightbox" )
    ( is (window_name) "darkbox" )
  )
)
```

If this statement returns boolean true, then second argument of <code>if</code>, <i>{action}</i> is executed. Action also can be either a single function like this:

```
( maximize )
```

or a multiple functions like this:

```
( begin
  ( maximize )
  ( set_workspace 4 )
)
```

Alternatively you can use GUI configuration tool <a href="http://code.google.com/p/gdevilspie/">gdevilspie</a>, which is also available in Debian's official repositories:

```
# apt-get install gdevilspie
```

But writing these instructions manually gives you more flexibility and much more fun ;))

<strong>Give me some real examples</strong>
OK. First of all let's take a look at simple definition file, that was taken from <a href="http://wiki.archlinux.org/index.php/Per_Application_Transparency" title="Per Application Transparency - ArchWiki">ArchWiki</a>:

```
( if
  ( is (window_class) "UXTerm" )
  ( spawn_async ( str "transset-df -i " (window_xid) " 0.75" ) )
)
```

When new window with <i>UXTerm</i> class is opened, devil's pie will run specified command in background. You can read more about functions and examples of their usage <a href="http://foosel.org/linux/devilspie" title="Devil's Pie documentation">at foosel</a>.

Probably after you'll figure out that there's a devil's pie's built-in function <code>opacity</code> you will want to use it instead of <code>spawn_async</code>, but very soon you'll find that it will not work (at least in Openbox) - seems like this function works in Metacity only, or does not works at all. ;))

<strong>Advanced example</strong>
Lot's of people who work with photography knows very famous proprietary software Adobe Photoshop(tm) which by default has single window interface. To be honest it's not very comfortable, and I believe, that those who use GIMP with more than one monitor, or those who knows where their <code>Tab</code> key is situated on keyboard will understand me. But lots of people are still (probably because of the past) addicted to the single-window interface, and it will become as an option of new GIMP version. But those of you, who don't want to wait (and that python script is not the most easy way to achieve our needs), can achieve similar "effect" with help of devil's pie. Anyway these rules will be useful even if you are hardcore believer of multi-window interface.

First of all, GIMP gives us at least three different roles of windows:
<ol>
  <li><code>gimp-toolbox</code> - Toolbox window</li>
  <li><code>gimp-image-window</code> - Main window with image</li>
  <li><code>gimp-dock</code> - Dock windows like "Layers", "Channels", etc.</li>
</ol>

As we are going to relay on <code>window_role</code> value it's better to be sure we are dealing with correct windows. To do so, we can group all following parts under single block:

```
( if
  ( matches (window_class) "^Gimp" )
  ( begin
    ; all real rules will be here
  )
)
```

We'll start with toolbox. Regardless to which type of interface you prefer you would like to have GIMP toolbox to be place always in same place. Also, I prefer this window not to be neither on pager nor in the task list - it's not a main window for me at all. So, to achieve that we can write following:

```
( if
  ( is (window_role) "gimp-toolbox" )
  ( begin
    ( skip_pager )              ; Remove from the pager
    ( skip_tasklist )           ; Remove from the window list
    ( geometry "238x786+0-2" )  ; Set window geometry and position
  )
)
```

Well, I guess that portion was really simple. But I would like to explain <code>( geometry "238x786+0-2" )</code> a little. This function tells to set matching window width to <u>238px</u>, height to <u>786px</u>, offset from the left side to <u>0px</u> and offset from the bottom to <u>2px</u>. First of all, my screen dimension is 1280x800. And I have a tint2 taskbar on the top which takes 12px of height, so I can use 1280x788 of my screen. But as you can see, I have set height of toolbox to 786px which is less than my "safe" area, that because of <code>geometry</code> sets geometry of X window directly, which does not know anything about decorations your window manager puts on it. I don't use window decorations (I really don't need a title bar of the window - I can see it in the taskbar), but I leave a border of windows which is 1px in my case. So my real window height is <i>788px - 2px</i>. And the same reason I set <i>2px</i> bottom offset instead of <i>0</i>. To make it more clean, you can achieve the same by putting <code>+12</code> top offset instead of <code>-2</code> which will mean 12px from the top, in this case function will be: <code>( geometry "238x786+0+12" )</code>. I hope that was more than clear enough.

The last tip, just to prevent some of the questions. If you don't to "calculate" height, or want solution to be more "universal", you can put <code>( maximize_vertically )</code> function after <code>( geometry "238x786+0-2" )</code>, so it will become something like this:

```
; ... skipped ...
    ( geometry "238x786+0-2" )  ; Set window geometry and position
    ( maximize_vertically )     ; Maximize window vertically
; ... skipped ...
```

Now let's define some rules for <code>gimp-dock</code> windows. Basically I prefer them to be removed from the pager and tasklist as well as toolbox, but I also want these windows to be decorated (regardless to my default settings of Openbox) and to act as a toolbar windows (to have only "close" button in the title). So here's simple rule:

```
( if
  ( is (window_role) "gimp-dock" )
  ( begin
    ( skip_pager )              ; Remove from the pager
    ( skip_tasklist )           ; Remove from the window list
    ( wintype "toolbar" )       ; Set proper window type
    ( decorate )                ; Make sure window will be decorated
  )
)
```

I guess no extra words are needed this time, but if you want to ask something - feel free to ask in the comments. Now all that was left is an image window. It's the most easy thing, and it's rule may be:

```
( if
  ( is (window_role) "gimp-image-window" )
  ( geometry "1038x786-2-2" )
)
```

It's too simple to tell something more. But again, if you would like it to be more universal you can put <code>( maximize_vertically )</code> after <i>geometry</i>, but don't forget to use <i>begin</i> function, so you can write something like this instead:

```
( if
  ( is (window_role) "gimp-image-window" )
  ( begin
    ( geometry "1038x786-2-2" )
    ( maximize_vertically )
  )
)
```

Alternatively, you might want image window to be fully maximized. In this case this rule will become like this:

```
( if
  ( is (window_role) "gimp-image-window" )
  ( maximize )
)
```

After all, here's full version of what we have made (also available for download, see the link below):

```
( if
  ( matches (window_class) "^Gimp" )
  ( begin
    ;
    ; GIMP Toolbox
    ; --------------------------------------------------------------------
    ( if
      ( is (window_role) "gimp-toolbox" )
      ( begin
        ( skip_pager )              ; Remove from the pager
        ( skip_tasklist )           ; Remove from the window list
        ( geometry "238x786+0-2" )  ; Set window geometry and position
        ( maximize_vertically )     ; Maximize window vertically
      )
    )
    ;
    ; GIMP Docklets (Layers, Channels, etc).
    ; --------------------------------------------------------------------
    ( if
      ( is (window_role) "gimp-dock" )
      ( begin
        ( skip_pager )              ; Remove from the pager
        ( skip_tasklist )           ; Remove from the window list
        ( wintype "toolbar" )       ; Set proper window type
        ( decorate )                ; Make sure window will be decorated
      )
    )
    ;
    ; GIMP image window
    ; --------------------------------------------------------------------
    ( if
      ( is (window_role) "gimp-image-window" )
      ( begin
        ( geometry "1038x786-2-2" )
        ( maximize_vertically )
      )
    )
  )
)
```

---
title: Beware of PHP's list() function
author: Aleksey V Zapparov AKA ixti
date: 26/06/2010
category: development
tags: gotcha, php, tip

If you are using <a href="http://php.net/manual/en/function.list.php">list()</a> function with variable, like this:

~~~ php
$arr = array('green', 'apple');
list($color, $fruit) = $arr;
```
You should pay attention to the order of variables you assign if one of them has same name as initial array. Else you'll run into madness, trying to find a bug...

~


I met such bug when I found my modified version of <a href="/?p=261">form to model filler</a> not working. Well ther's not much to say. According to PHP's manual:

<blockquote><strong>list()</strong> assigns the values starting with the right-most parameter.</blockquote>

This means, that if you will place variable with same name as initial one at the most right position you'll not receive what you expect. Here are two vivid examples that will explain it better:

<strong>The Good</strong>

~~~ php
$name = array('John', 'Doe');
list($name, $surname) = $name;

var_dump($name);    // string(4) "John"
var_dump($surname); // string(3) "Doe"
```

<strong>The Bad</strong>

~~~ php
$path = array('Point A', 'Point B');
list($point, $path) = $path;

var_dump($point); // string(1) "P"
var_dump($path);  // string(7) "Point B"
```

<strong>The Queen</strong>
<code>list()</code> works with array directly (not a copy of an array). Let's look at <em>the bad</em> more preciously. As <code>list()</code> assigns values from right most parameter, <code>$path</code> becomes second value of initial array, so when it's <code>$point</code>'s turn, <code>$path</code> is a <em>Point B</em> string. But you can avoid it by passing a copy of array :)) Just prepend variable with <code>(array)</code> cast instruction:

~~~ php
$path = array('Point A', 'Point B');
list($point, $path) = (array) $path;

var_dump($point); // string(7) "Point A"
var_dump($path);  // string(7) "Point B"

~~~ 

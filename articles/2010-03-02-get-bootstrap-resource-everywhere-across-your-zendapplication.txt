---
slug: get-bootstrap-resource-everywhere-across-your-zendapplication
title: Get Boot­strap Resource every­where across your Zend_Application
author: Aleksey V Zapparov AKA ixti
date: 02/03/2010
category: zend-framework
tags: bootstrap, php, resource

Sometimes you need to access some resources created inside your bootstrap somewhere deep inside your application. There are two ways to achieve this. First is to use <code>Zend_Registry</code>, and second is to use resources of your bootstrap directly. Before we'll follow, please ask your self: "Am I really need this?", because in most cases you don't need it, so this is a useless post.

~


So, seems like you really need this useless tip ;)) as you still here, so let's start. The most known way to achieve this as I told before is <code>Zend_Registry</code>. So for example you can put something like this into your init/bootstrap:
<pre lang="php">
//somewhere in your bootstrap
Zend_Registry::set('myResourceName', $resource);
</pre>

Then, you can access this <code>$resource</code> anywhere as simple as:
<pre lang="php">
// somewhere outside your bootstrap
$resource = Zend_Registry::isRegistered('myResourceName')
          ? Zend_Registry::get('myResourceName') : null;
</pre>

Note that I used <code>Zend_Registry::isRegistered()</code> method to check if specified key exists in the registry at all. Of course if you need to access more than one value, you better use instance of registry to minimize some redundant calls:
<pre lang="php">
$registry   = Zend_Registry::getInstance();
$resource_1 = $registry->offsetExists('myResource1')
            ? $registry->offsetGet('myResource1') : null;
$resource_2 = $registry->offsetExists('myResource2')
            ? $registry->offsetGet('myResource2') : null;
</pre>

It was robust and simple. But if you use Zend_Application, then you would like to get access to your Booststrap resources. For those who are not familiar with Bootstrap resources, I would like to make short introduce. There are two types of resources: first is subclasses of <code>Zend_Application_Resource_ResourceAbstract</code> and second are methods with <i>_init</i> prefix of your Bootstrap class. One very important notice, when your resource returns a value, it will run only once, e.g.:
<pre lang="php">
class Bootstrap extends Zend_Application_Bootstrap_Bootstrap
{
    protected function _initFoo()
    {
        $t = microtime();
        echo 'Foo (' . $t . ')';
        return $t;
    }

    protected function _initBoo()
    {
        $t = microtime();
        echo 'Foo (' . $t . ')';
    }
}
</pre>

According to example above, <code>$this->bootstrap('Foo');</code> will <i>echo</i> a string only once and you'll be able to get <i>$t</i> value, by <code>$this->getResource('Foo')</code> in your <code>Bootstrap</code> class. But as <i>_initBoo()</i> doesn't return any value it will be called every time (and in this dummy sample will echo string as many times as) <code>$this->bootstrap('Boo')</code> is called.

Let's assume we have some resource described in our Bootstrap. For example, we want to have access to child values of <i>app</i> from our application configuration:
<pre lang="php">
class Bootstrap extends Zend_Application_Bootstrap_Bootstrap
{
    protected function _initConfig()
    {
        return new Zend_Config((array) $this->getOption('app'));
    }
}
</pre>

Also let's say that our <code>application.ini</code> has at least following settings:
<pre lang="ini">
[production]
#...
app.name        = "My Application"
app.admin.email = "ixti@example.com"
app.admin.name  = "Aleksey V. Zapparov AKA ixti"
#...
</pre>

First, for vivid purpose, here's an example how this resource will work inside Bootstrap:
<pre lang="php">
class Bootstrap extends Zend_Application_Bootstrap_Bootstrap
{
    // ...
    protected function _initLog()
    {
        // make sure Config resource is initiated first
        $cfg = $this->bootstrap('Config')->getResource('Config');

        $mail = new Zend_Mail();
        $mail ->addTo($cfg->admin->email, $cfg->admin->name);

        $writer = new Zend_Log_Writer_Mail($mail);
        $writer ->setSubjectPrependText('Errors with ' . $cfg->name);

        // Limit log event level for the writer
        $writer ->addFilter(Zend_Log::WARN);

        $log = new Zend_Log();
        $log ->addWriter($writer);

        return $log;
    }
}
</pre>

Now, you want to get <i>Config</i> resource somewhere outside your Bootstrap class. To do this you simply need to get an access to your <code>Bootrstap</code> instance, so you'll be able to get any resource of it with something like:
<pre lang="php">
$admin = $bootrap->getResource('Config')->admin;
</pre>

Of course if you have an access to your <code>Zend_Application</code> instance it's not a big deal, as application have an appropriate method <code>getBootstrap()</code>, so you can get your bootstrap by:
<pre lang="php">
$bootstrap = $application->getBootstrap();
</pre>

But you don't have a direct access to application within <code>ActionController</code>. Fortunately, <code>FrontController</code> resource sets <code>Boostrtrap</code>bootstrap parameter. So you can access both bootstrap and application from your Contoller, without any additional "dances":
<pre lang="php">
public class FooController extends Zend_Controller_Action
{
    public function init()
    {
        $front       = $this->getFrontController();
        $bootstrap   = $front->getParam('bootstrap');
        $application = $bootstrap->getApplication();
    }
}
</pre>

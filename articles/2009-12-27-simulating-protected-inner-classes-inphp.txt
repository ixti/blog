---
title: Sim­u­lat­ing pro­tec­ted inner classes in PHP
author: Aleksey V Zapparov AKA ixti
date: 27/12/2009
category: development/howto
tags: oop, php

Some languages allow you to create protected classes accessible within same namespace or class scope. PHP does not have such support. You can prevent class form direct initialization by declaring <code>__construct()</code> as protected or private. This technique is used for Singleton pattern mostly. But we can simulate protected nested class using inheritance. As parent class can access protected methods of child class we can use it as some kind of enclosure and help us simulate protected inner class in PHP...

~


Here is how this can be done with Java, so it become easier to understand what I mean:
<pre lang="java">
package application;

public class Main
{
    public Main()
    {
        InnerClass obj = new InnerClass();
        obj.saySomething();
    }

    protected class InnerClass
    {
        public void saySomething()
        {
            System.out.print("What do you want me to say?");
        }
    }

    public static void main(String[] args)
    {
        Main self = new Main();
    }
}
</pre>

Upon program starts (static method <code>Main(String[])</code>) it initialize new instance of <code>Main</code> class. Within <code>Main</code> class' constructor I'm creating a new instance of protected inner class <code>InnerClass</code> which can't be accessed outside scope of that class (or it's descendants). Finally I'm calling public <code>saySomething()</code> method of <code>InnerClass</code> just for a vivid example which simply outputs <i>What do you want me to say?</i>.

Unfortunately, as I said before, there's no language-level solution to create protected inner classes in PHP. But you can simulate such behavior. The trick is to create a base class which will act like a scope enclosure for all descendants. Of course you will not be able to create instance of <i>Child_A</i> class from <i>Child_B</i> if <i>Child_A</i>'s constructor will be protected even although they have common parent class. So another part of the trick is to define a builder method in the "scope" class.

Let's simply simulate the same behavior as in example above but in PHP. First I'll define a <code>Main_Scope</code> abstract class which will act as a scope enclosure:
<pre lang="php">
abstract class Main_Scope
{
    final protected function _new($classname)
    {
        $classname = 'Main_' . $classname;
        return new $classname;
    }
}
</pre>

Now, all descendants of <code>Main_Scope</code> can call <code>$this->_new('InnerClass')</code> to initiate new instance of <code>Main_InnerClass</code> class. Let's create a protected class:
<pre lang="php">
class Main_InnerClass extends Main_Scope
{
    protected function __construct()
    {}

    public function saySomething()
    {
        fwrite(STDOUT, 'What do you want me to say?');
    }
}
</pre>

And finally, let's create a public class which will <code>saySomething()</code> for us:
<pre lang="php">
class Main extends Main_Scope
{
    public function __construct()
    {
        $obj = $this->_new('InnerClass');
        $obj->saySomething();
    }

    public static function Main()
    {
        $self = new Main();
    }
}

Main::Main();
</pre>
